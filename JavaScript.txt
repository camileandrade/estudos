>> Introdução a JavaScript
	>> É uma linguagem de programação Web

	>> Orientada a objetos

	>> Linguagem de alto nível, interpretada e não tipada
		* Linguagem de alto nível é projetada para ser fácil de ler e escrever para humanos
		* Linguagem interpretada executa o código linha por linha
		* Linguagem não tipada são aquelas em que as variáveis não têm um tipo fixo, sendo determinadas em tempo de execução

	>> A sintaxe é derivada da linguagem Java

>> Estrutura Léxica
	>> Conjunto de regras elementares que especificam o modo de escrever os programas nessa linguagem
		>> Nome de variáveis, caracteres delimitadores, etc.

	>> Diferencia maiúsculas de minúsculas 

	>> Ignora os espaços que aparecem entre sinais e as quebras de linha

	>> Aceita dois estilos de comentários
		>> // é utilizado para comentar apenas uma linha
		>> /* */ é utilizado para comentar um bloco

	>> Literal é um valor de dados que aparece diretamente em um programa

	>> Identificador é um nome, usado para dar nomes a variáveis e funções.
		>> Deve começar com uma letra, sublinhado (_) ou cifrão ($)
		>> Os caracteres seguintes podem ser letras, dígitos, sublinhados ou cifrões
		>> Dígitos não são permitidos como primeiro caractere

		>> JavaScript reserva identificadores para uso próprio e não podem ser usados como identificadores normais
			>> São as palavras reservadas ou palavras-chave

	>> Utiliza ponto e vírgula (;) para separar instruções
		>> Ele pode ser omitido apenas se elas estão em linhas separadas, utilizando a quebra de linha
			>> Trata as quebras de linha como ; somente quando não consegue analisar o código sem elas
			>> Mas se a linha seguinte começa com (, [, /, + ou -, existe a possibilidade de ser interpretado 
			   como continuação da instrução da linha anterior

>> Tipos, Valores e Variáveis
	>> Tipo refere-se à categoria de dados que uma variável pode armazenar
	>> Os tipos podem ser divididos em duas categorias
		>> Primitivos
			>> Números, Strings, Boolean, Undefined, Null
		>> Não Primitivos
			>> Objeto e Função executável associado

	>> O valor é o dado real atribuído a uma variável

	>> Uma variável é um nome simbólico que aponta para um valor armazenado na memória
		>> São declaradas usando a palavra-chave var
		>> Variáveis declaradas fora de uma função são as variáveis globais, e as declaradas dentro têm escopo de função

	>> Números
		>> Não distingue entre valor inteiro e valor flutuante, todos são representados como ponto flutuante
		>> Literal inteiro representa um número sem parte decimal
		>> Literal de ponto flutuante representa um número com uma parte decimal
		>> Usa-se operadores aritméticos
			>> +, -, *, /
		>> Para operações matemáticas mais complexas, usa-se as funções do objeto Math já definido no JavaScript
			* Consultar métodos disponíveis
	
	>> Datas e Horas
		>> JavaScript tem a construtora Date() para criar objetos que representam datas e horas
			* Consultar métodos disponíveis

	>> Strings
		>> Usada para representar texto
		>> É uma array de caracteres
			>> Utilizam indexação com base 0
		>> Para incluir em uma variável, deve-se colocar seus caracteres dentro de aspas simples ou aspas duplas
		>> Pode-se dividir uma string em várias linhas utilizando (\n)
		>> Para concatenar string, utiliza-se o operador +
			>> Em números ele soma, em string ele une
		* Consultar métodos disponíveis que podem ser aplicados em strings

	>> Booleanos
		>> Representa verdadeiro ou falso
			>> As palavras reservadas são true ou false
		>> Resultam de comparações e são muitos usados em estruturas de controle
	
	>> Null e Undefined
		>> São dois valores distintos que são frequentemente usados para indicar a ausência de valor

		>> null representa a ausência intencional de qualquer objeto ou valor, sendo usado explicitamente para 
		   indicar que uma variável não tem valor e deve estar "vazia"

		>> undefined indica que uma variável foi declarada, mas ainda não foi atribuída a um valor

	>> Objeto Global 
		>> Refere-se a um objeto que está disponível em todo o ambiente JavaScript, ou seja, ele pode ser acessado de qualquer lugar do código

	>> Objeto Wrapper 
		>> É uma forma de converter valores primitivos (como números, strings, ou booleanos) em objetos temporários para que possam ter métodos e 
		   propriedades associados a eles.
		>> Não existem objetos wrapper para null e undefined. 
		>> Qualquer tentativa de acessar uma propriedade nesses valores resulta em um TypeError
		>> É possível criar explicitamente objetos wrapper usando new String(), new Number(), ou new Boolean(), mas raramente é necessário ou útil
		>> JavaScript converte quando necessário

		>> == trata um valor primitivo e seu objeto wrapper como iguais.
		>> === pode diferenciá-los, assim como o operador typeof

	>> Valores primitivos Imutáveis e Referências de Objeto Mutáveis
		>> Valores de tipos primitivos são imutáveis
			>> Strings são uma array, mas ela não é modificada quando métodos são aplicados a ela
				>> É retornado um novo valor
		>> Dois valores são iguais apenas se tiverem o mesmo valor
			>> Strings só são iguais se tiverem o mesmo comprimento e os mesmos caracteres em cada índice
		
		>> Objetos são mutáveis
		>> Não são comparados por valor
			>> Mesmo que tenhas as mesmas propriedades e valores
			>> São comparados por referência
				>> Só são iguais se eles se referem ao mesmo objeto básico

	>> Conversões de Tipo
		>> Existem duas formas principais de conversão de tipos:

			>> Conversão Explícita: Ocorre quando você converte o tipo de dado de forma intencional, 
			   utilizando funções ou métodos específicos

				>> Conversão para String
					>> String():
						>> É uma função global que pode ser usada para converter qualquer valor para uma string
						   incluindo null e undefined.
						>> Em arrays, converte os elementos em uma string e os separa por vírgulas
						>> É mais abrangente
					>> .toString():
						>> É um método que existe na maioria dos objetos, mas não funciona em null e undefined gerando um erro
						>> É mais específico

				>> Conversão para Número
					>> Number(): 
						>> É uma função global que converte um valor para número
							>> Tenta converter a string inteira em um número considerando números inteiros, 
							   decimais, e valores especiais como null, true, false, etc
								>> Não truncar na primeira ocorrência de caracteres inválidos
						>> Se a conversão não for possível, retorna NaN (Not a Number)
						>> valor booleano true é convertido em 1 e false em 0

					>> .parseInt(): 
						>> Converte uma string para um número inteiro
							>> Analisa a string da esquerda para a direita e para quando encontra um caractere
							   que não pode ser convertido em um número
						>> Pode usar uma base numérica específica (radix)
							>> Usado como segundo argumento
								>> 2 (sistema binário), 8 (sistema octal), 10 (sistema decimal), 
							   	   16 (sistema hexadecimal (dígitos 0-9 e letras A-F)

					>> .parseFloat(): 
						>> Converte uma string para um número de ponto flutuante (número decimal)
							>> Analisa a string da esquerda para a direita e para quando encontra um caractere
							   que não pode ser convertido em um número

				>> Booleano
					>> Converte qualquer valor para um booleano
					>> Valores como 0, null, undefined, NaN, "" (string vazia), e false são convertidos para false	
					>> Todos os outros valores são convertidos para true
						

			>> Conversão Implícita: Ocorre automaticamente pelo JavaScript em certas operações

	>> Declaração de Variável
		>> São declaradas com a palavra-chave var
		>> É possível declarar várias variáveis em uma única linha
			>> var a, b;
		>> E também é possível declarar a variável e já inicializá-la com um valor
			>> var j = "Eu amo JavaScript!";

	>> Escopo de Variável
		>> Região do código onde a variável foi definida

			>> A variável global é declarada fora de qualquer função, bloco, ou objeto
			   Ela está disponível em qualquer lugar do código, tanto dentro de funções quanto fora delas
				>> Pode levar a efeitos colaterais indesejados se não forem usadas com cuidado

			>> A variável local é declarada dentro de uma função ou bloco de código
			   Ela só está disponível no escopo onde foi declarada
				>> Evitam poluir o escopo global e ajudam a prevenir conflitos de nomes de variáveis
				>> São destruídas automaticamente quando a função ou bloco em que foram definidas termina sua execução,
				   liberando a memória usada

	>> Escopo de Função
		>> 
		





