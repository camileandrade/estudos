>> Map:
	>> Coleção de pares chave-valor, onde qualquer tipo de valor pode ser usado como chave ou valor
		--> Diferentemente, as chaves de um objeto são convertidas para strings
	>> Mantém a ordem de inserção dos pares chave-valor
	>> Pode ser iterado

	>> Inicializando um map:
		>> let map = new Map()

	>> Métodos:
		>> set(chave, valor): Adiciona ou atualiza um par chave-valor.
		>> get(chave): Retorna o valor associado à chave especificada.
		>> has(chave): Verifica se uma chave existe no Map.
		>> delete(chave): Remove o par chave-valor da chave fornecida.
		>> clear(): Remove todos os pares chave-valor do Map.
		>> size: Retorna o número de elementos no Map.

>> Weak Map:
	>> Coleção de pares chave-valor, onde as chaves devem ser objetos e os valores podem ser de qualquer tipo
	>> Se não houver mais referências ao objeto chave em qualquer lugar do código, o coletor de lixo pode removê-lo, 
	   junto com seu valor associado, automaticamente
	>> Não pode ser iterado porque a coleta de lixo pode remover pares chave-valor de forma imprevisível

	>> Métodos:
		>> weakMap.set(chave, valor): Adiciona ou atualiza o par chave-valor.
		>> weakMap.get(chave): Retorna o valor associado à chave ou undefined se a chave não existir.
		>> weakMap.has(chave): Retorna true se a chave existir, e false caso contrário.
		>> weakMap.delete(chave): Remove o par chave-valor.